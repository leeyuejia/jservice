{"version":3,"sources":["component/Title.js","component/Footer.js","component/ScoreBoard.js","component/DisplayResult.js","component/Question.js","component/Selection.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Footer","Component","ScoreBoard","props","handleScore","bind","event","preventDefault","this","updateScore","Fragment","score","onClick","color","name","DisplayResult","answer","rightAns","Question","state","question","displayAnswer","submitAnswer","handleChange","handleSubmit","clue","setState","target","value","console","log","split","regLetter","result","forEach","letter","index","match","push","data","category","title","id","label","type","onChange","Selection","handleQuestion","apiUrl","pushToArray","amt","max","newArray","i","clues","length","Math","floor","random","mapTitleToResult","input","original","map","el","DisplayBoard","generateQuestion","fetchCategoryQuestion","fetchRandomQuestion","query","fetch","response","json","resultToArray","finalResult","operator","key","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.abf3b98e.chunk.js","sourcesContent":["import React from 'react'\n\n  function Title () {\n    return (\n      <h1 className='title'>\n        Welcome to jservice\n      </h1>\n    )\n  }\n\nexport default Title\n","import React, { Component } from 'react'\n\nclass Footer extends Component {\n    render() {\n      return (\n        <footer>\n          Question provided by jservice\n        </footer>\n      )\n    }\n  }\n\nexport default Footer\n","import React, { Component } from 'react'\nimport { MDBBtn, MDBBtnGroup } from \"mdbreact\";\n\nclass ScoreBoard extends Component {\n  constructor(props) {\n    super(props)\n    this.handleScore = this.handleScore.bind(this)\n  }\n  handleScore(event) {\n    event.preventDefault()\n    this.props.updateScore(event)\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h2>Score</h2>\n        <h1>{this.props.score}</h1>\n        <MDBBtnGroup className='scorebutton'>\n          <MDBBtn onClick={this.handleScore} color=\"info\"  name='+'>+</MDBBtn>\n          <MDBBtn onClick={this.handleScore} color=\"info\"  name='-'>-</MDBBtn>\n          <MDBBtn onClick={this.handleScore} color=\"info\" name ='reset'>Reset</MDBBtn>\n        </MDBBtnGroup>\n      </React.Fragment>\n    )\n  }\n}\nexport default ScoreBoard\n","import React, { Component } from 'react'\n\nclass DisplayResult extends Component {\n    render() {\n        return (\n            <div className='result'>\n                <div className='submitAnswer'>\n                    <h3>Your Answer : {this.props.answer}</h3>\n                </div>\n                <div className='answer'>\n                    <h3>Correct Answer : {this.props.rightAns}</h3>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DisplayResult\n","import React, { Component } from 'react'\nimport { MDBBox, MDBInput, MDBBtn } from 'mdbreact';\n\nimport DisplayResult from './DisplayResult'\n\nclass Question extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      question: this.props.question,\n      displayAnswer: false,\n      submitAnswer: '',\n      // category : this.props.category\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.clue = this.clue.bind(this)\n  }\n  handleChange(event) {\n    event.preventDefault()\n    this.setState({ submitAnswer: event.target.value })\n    console.log(this.state.displayAnswer)\n  }\n  handleSubmit(event) {\n    event.preventDefault()\n    const answer = this.props.question.answer\n    this.setState({ displayAnswer: !this.state.displayAnswer, rightAns: answer })\n  }\n  clue(answer) {\n    const split = answer.split(\"\")\n    const regLetter = /^[A-Za-z]+$/\n    const result = []\n    split.forEach((letter, index) => {\n      if (!letter.match(regLetter)) {\n        result.push(letter)\n      } else if (letter.match(regLetter) && index % 4 === 0) {\n        result.push('_')\n      } else result.push(letter)\n    })\n    return result\n  }\n  // async resetState (props) {\n  //   console.log(props)\n  //   await this.setState({\n  //     question: this.props.question,\n  //     displayAnswer : false,\n  //     submitAnswer: '',\n  //     category :this.props.category\n  //   })\n  // }\n  //// UNSURE HOW TO USE componentDidUpdate as data structure is different\n  //  async componentDidUpdate(prevProps) {\n  //       console.log(this.props.question.question)\n  //       console.log(prevProps.question.question)\n  //       if(this.props.question.question !== prevProps.question.question) {\n  //             await this.setState({\n  //               question: this.props.question,\n  //               displayAnswer : false,\n  //               submitAnswer: '',\n  //               category :this.props.category\n  //           })\n  //         }\n  //       }\n  render() {\n    const data = this.props.question\n    const clue = this.clue(this.props.question.answer)\n    const displayAnswer = this.state.displayAnswer\n    const category = data.category.title\n    console.log(category)\n    return (\n      <React.Fragment>\n        <MDBBox className=\"block-example border border-dark eachQuestion\">\n          <h3><strong>Category</strong> :{category}</h3>\n          <h3 id={this.props.index}><strong>Question</strong>: {data.question}</h3>\n          <h3><strong>Clue</strong> : {clue} </h3>\n          <MDBInput label=\"Answer\" type='text' onChange={this.handleChange} value={this.state.submitAnswer} />\n          <MDBBtn type='submit' onClick={this.handleSubmit}>Show Answer</MDBBtn>\n          {displayAnswer ?\n            <div>\n              <DisplayResult\n                answer={this.state.submitAnswer}\n                rightAns={data.answer} />\n            </div>\n            :\n            ''\n          }\n        </MDBBox>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Question\n","import React, { Component } from 'react'\nimport { MDBBtn } from \"mdbreact\";\n\nexport class Selection extends Component {\n    render() {\n        return (\n            <MDBBtn color='default' \n                onClick={(event) => {this.props.handleQuestion(event)}} \n                value = {this.props.value}\n                name = {this.props.name}>\n                {this.props.name}\n            </MDBBtn> \n        )\n    }\n}\n\nexport default Selection\n","import React, { Component } from 'react'\nimport './App.css';\nimport Title from './component/Title'\nimport Footer from './component/Footer'\nimport ScoreBoard from './component/ScoreBoard'\nimport Question from './component/Question'\nimport Selection from './component/Selection'\n\nconst apiUrl = 'https://jservice.io/api/'\nconst randomNumber = (max) => {\n  return Math.floor(Math.random() * Math.floor(max))\n}\nconst pushToArray = (result, amt) => {\n  let newArray = []\n  for(let i=0 ; i < amt; i++) {\n    newArray.push(result.clues[randomNumber(result.clues.length)])\n   }\n   return newArray\n}\nconst mapTitleToResult = (input, original) => {\n  input.map((el,index) => {\n    return el.category = {title : original.title}\n  })\n  return input\n}\nclass DisplayBoard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: null,\n      score : 0,\n    }\n    this.generateQuestion = this.generateQuestion.bind(this)\n    this.updateScore = this.updateScore.bind(this)\n    this.fetchCategoryQuestion = this.fetchCategoryQuestion.bind(this)\n    this.fetchRandomQuestion = this.fetchRandomQuestion.bind(this)\n  }\n  //fetch api function\n  async fetchRandomQuestion(event) {\n    const query = event.target.value\n    switch(query) {\n      case 'one' :\n        await this.setState({query :'random'})\n        break;\n      case 'ten' :\n        await this.setState({query :'random?count=10'})\n        break;\n      default :\n        return true\n    }\n    const response = await fetch(apiUrl + this.state.query)\n    const result = await response.json()\n    this.setState({ data: result })\n  }\n\n  async fetchCategoryQuestion(event) {\n    const query = event.target.value\n    const response = await fetch(apiUrl + 'category?id=' + query)\n    const result = await response.json()\n    const resultToArray = pushToArray(result,5)\n    const finalResult = mapTitleToResult(resultToArray, result)\n    console.log(finalResult)\n    await this.setState({ \n        data: finalResult,\n        query : 'category?id=' + query,\n      })\n  }\n\n  ///Generate Question\n  async generateQuestion(event) {\n    event.preventDefault()\n    switch (event.target.value) {\n      case '42':\n        await this.fetchCategoryQuestion(event)\n        break;\n      case '136':\n        await this.fetchCategoryQuestion(event)\n        break;\n      case '114':\n        await this.fetchCategoryQuestion(event)\n        break;\n      case '31':\n        await this.fetchCategoryQuestion(event)\n        break;\n      case '4':\n        await this.fetchCategoryQuestion(event)\n        break;\n      default:\n        await this.fetchRandomQuestion(event)\n    }\n  }\n  updateScore (event) {\n    event.preventDefault()\n    const operator = event.target.name\n      if(operator === '+') {\n        this.setState({score : this.state.score + 1})\n      }else if (operator === '-' && this.state.score > 0) {\n      this.setState({score : this.state.score - 1})\n      }else if (operator === 'reset') {\n        this.setState({score : 0})\n      }\n  }\n  render() {\n    return (\n      <div className = 'displayBoard-container'>\n        <div className = 'menu-left'>\n          <h2> Menu </h2>\n          <div className='selection-container'>\n          <Selection handleQuestion = {this.generateQuestion} value = 'one' name = 'Random Question'/>\n          <Selection handleQuestion = {this.generateQuestion} value = 'ten' name = '10 Random Question'/>\n          <Selection handleQuestion = {this.generateQuestion} value = '42' name = 'Sports'/>\n          <Selection handleQuestion = {this.generateQuestion} value = '136' name = 'Stupid Answers'/>\n          <Selection handleQuestion = {this.generateQuestion} value = '114' name = 'History'/>\n          <Selection handleQuestion = {this.generateQuestion} value = '31' name = 'The Bible'/>\n          <Selection handleQuestion = {this.generateQuestion} value = '4' name = 'The Movie'/>\n          </div>\n        </div>\n        <div className='questionboard'>\n          {this.state.data === null ? \n          <h2>Select your option</h2>\n            :\n            this.state.data.map((question, index) => {\n              return <Question \n              question={question} \n              index={index} \n              key={index}\n              />\n            })}\n        </div>\n        <div className='scoreboard'>\n          <ScoreBoard \n            score = {this.state.score}\n            updateScore = {this.updateScore}\n            />\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title />\n      <DisplayBoard />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport'bootstrap-css-only/css/bootstrap.min.css'; \nimport'mdbreact/dist/css/mdb.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}